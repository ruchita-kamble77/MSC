2A #Use Numpy array to demonstrate basic array characteristics.
import numpy as np
# Creating an array
arr = np.array([1, 2, 3, 4, 5])
# Printing the array
print("Array:", arr)
# Printing the type of the array
print("Type:", type(arr))
# Printing the number of dimensions
print("Number of dimensions:", arr.ndim)
# Printing the shape of the array
print("Shape of the array:", arr.shape)
# Printing the size of the array (total number of elements)
print("Size of the array:", arr.size)
# Printing the data type of the array elements
print("Data type:", arr.dtype)


2B.Create Numpy array using list & tuple.
import numpy as np
# Creating a list
list_data = [1, 2, 3, 4, 5]
# Creating a NumPy array from the list
array_from_list = np.array(list_data)
print("Array from list:", array_from_list)

import numpy as np
# Creating a tuple
tuple_data = (1, 2, 3, 4, 5)
# Creating a NumPy array from the tuple
array_from_tuple = np.array(tuple_data)
print("Array from tuple:", array_from_tuple)


import numpy as np 
# Creating array from list with type float
a = np.array([[1, 2, 4], [5, 8, 7]], dtype='float')
print("Array created using passed list:\n", a)
# Creating array from tuple
b = np.array((1, 3, 2))
print("\nArray created using passed tuple:\n", b)
# Creating a 3x4 array with all zeros
c = np.zeros((3, 4))
print("\nAn array initialized with all zeros:\n", c)
# Create a constant value array of complex type
d = np.full((3, 3), 6, dtype='complex')
print("\nAn array initialized with all 6s.")
print("Array type is complex:\n", d)
# Create an array with random values
e = np.random.random((2, 2))
print("\nA random array:\n", e)
# Create a sequence of integers from 0 to 30 with steps of 5
f = np.arange(0, 30, 5)
print("\nA sequential array with steps of 5:\n", f)
# Create a sequence of 10 values in range 0 to 5
g = np.linspace(0, 5, 10)
print("\nA sequential array with 10 values between 0 and 5:\n", g)
# Reshaping a 3x4 array to 2x2x3 array
arr = np.array([[1, 2, 3, 4], [5, 2, 4, 2], [1, 2, 0, 11]])
newarr = arr.reshape(2, 2, 3)  # Should work correctly as both shapes have 12 elements
print("\nOriginal array:\n", arr)
print("Reshaped array:\n", newarr)
# Flatten array
arr = np.array([[1, 2, 3], [4, 5, 6]])
flarr = arr.flatten()
print("\nOriginal array:\n", arr)
print("Flattened array:\n", flarr)

2C. Basic operations: Arithmetic Operations on NumPy Array.
import numpy as np
# Creating two NumPy arrays
arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])
# Addition
add_result = arr1 + arr2
print("Addition:", add_result)
# Subtraction
sub_result = arr1 - arr2
print("Subtraction:", sub_result)
# Multiplication
mul_result = arr1 * arr2
print("Multiplication:", mul_result)
# Division
div_result = arr1 / arr2
print("Division:", div_result)
# Modulus
mod_result = arr1 % arr2
print("Modulus:", mod_result)

2D.Sorting array: There is a simple np.sort method for sorting NumPy arrays.
import numpy as np
# Creating a NumPy array
arr = np.array([5, 2, 8, 1, 3])
# Sorting the array
sorted_arr = np.sort(arr)
print("Original array:", arr)
print("Sorted array:", sorted_arr)

import numpy as np
# Create a 2D array
a = np.array([[1, 4, 21],
              [13, 4, 6],
              [10, -1, 5]])

# Sorted array (default: flattened and sorted)
print("Array elements in sorted order (flattened):\n", np.sort(a, axis=None))
# Sort array row-wise
print("\nRow-wise sorted array:\n", np.sort(a, axis=1))
# Sort array column-wise with a specified algorithm
print("\nColumn-wise sorted array (using merge-sort):\n", np.sort(a, axis=0, kind='mergesort'))
# Example to show sorting of a structured array
# Define custom data type
dtypes = [('name', 'U10'), ('grad_year', int), ('cgpa', float)]
# Values to be put in the array
values = [('Hrithik', 2009, 8.5),
          ('Ajay', 2008, 8.7),
          ('Pankaj', 2008, 7.9),
          ('Aakash', 2009, 9.0)]
# Creating a structured array
arr = np.array(values, dtype=dtypes)
# Sort structured array by 'name'
print("\nArray sorted by names:\n", np.sort(arr, order='name'))
# Sort structured array by 'grad_year' and then by 'cgpa'
print("\nArray sorted by graduation year and then cgpa:\n", np.sort(arr, order=['grad_year', 'cgpa']))

